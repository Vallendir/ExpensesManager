buildscript {
    ext {
        /** Project variables **/
        projectJavaVersion = JavaVersion.VERSION_1_10

        /** Spring **/
        springBootVersion = '2.1.+'
        springLoadedVersion = '1.2.8.RELEASE'

        /** Mockito **/
        mockitoVersion = '2.23.0'

        /** JUnit **/
        junitVersion = '5.3.1'

        /** AssertJ **/
        assertjVersion = '3.11.1'

        /** Lombok **/
        lombokVersion = '1.18.4'

        /** Slf4j **/
        slf4jVersion = '1.7.25'
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        /** Spring **/
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.springframework:springloaded:$springLoadedVersion")
    }
}

allprojects {
    version = project.property('pl.expensesmanager.project.version')
    description = project.property('pl.expensesmanager.project.title')
}

List toExcludeFromMockito = ["org.junit.platform<>junit-platform-commons"]

subprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        /** Lombok **/
        implementation "org.projectlombok:lombok:$lombokVersion"

        /** Slf4j **/
        testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"

        /** JUnit **/
        testCompileOnly "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

        /** AssertJ **/
        testCompileOnly "org.assertj:assertj-core:$assertjVersion"

        /** Mockito **/
        testImplementation("org.mockito:mockito-core:$mockitoVersion") {
            toExcludeFromMockito.each {
                exclude group: "$it".split('<>')[0] as String, module: "$it".split('<>')[1] as String
            }
        }
        testImplementation("org.mockito:mockito-junit-jupiter:$mockitoVersion") {
            toExcludeFromMockito.each {
                exclude group: "$it".split('<>')[0] as String, module: "$it".split('<>')[1] as String
            }
        }
    }

    sourceCompatibility = projectJavaVersion
    targetCompatibility = projectJavaVersion
}